{% extends 'agent/base.html.twig' %}
{% block stylesheets %}
    <link href="{{ asset('agent/search/css/main.css') }}" rel="stylesheet" />
    <link rel="stylesheet" href="{{ asset('footballer/css/linearicons.css')}}">
    <link rel="stylesheet" href="{{ asset('footballer/css/font-awesome.min.css')}}">
    <link rel="stylesheet" href="{{ asset('footballer/css/bootstrap.css')}}">
    <link rel="stylesheet" href="{{ asset('footballer/css/magnific-popup.css')}}">
    <link rel="stylesheet" href="{{ asset('footballer/css/nice-select.css')}}">
    <link rel="stylesheet" href="{{ asset('footballer/css/animate.min.css')}}">
    <link rel="stylesheet" href="{{ asset('footballer/css/owl.carousel.css')}}">
    <link rel="stylesheet" href="{{ asset('footballer/css/main.css')}}">
    <link rel="shortcut icon" href="footballer/{{ asset('footballer/img/fav.png') }}">
{% endblock %}
{% block body %}
    <section class="welcome p-t-10">
        <div class="container">
            <div class="row d-flex">
                <div class="col-md-12">
                    <h1 class="title-4">
                        Mes informations personnelles
                    </h1>
                    <hr class="line-seprate">
                    {% for message in app.flashes('success') %}
                        <div class="alert alert-success">
                            {{ message }}
                        </div>
                    {% endfor %}
                    {% for message in app.flashes('error') %}
                        <div class="alert alert-danger">
                            {{ message }}
                        </div>
                    {% endfor %}
                    <div class="col-md-12">
                        {{ form_start(form, {'attr': {'class': 'register-form', 'id':'register-form'}}) }}
                        <div class="row flex-column">
                            <label>Nom</label>
                            {{ form_row(form.name, {'label': false,'attr': {'placeholder': 'Nom', 'class': ''}}) }}

                            <label>Prénom</label>
                            {{ form_row(form.firstName, {'label': false,'attr': {'placeholder': 'Prénom', 'class': ''}}) }}

                            <label>Date de naissance</label>
                            {{ form_row(form.dateOfBirth, {'label': false,'attr': {'placeholder': 'Date de naissance', 'class': ''}}) }}

                            <label>Téléphone</label>
                            {{ form_row(form.account.phone, {'label': false,'attr': {'placeholder': 'Téléphone', 'class': ''}}) }}

                            <label>Ville</label>
                            {{ form_row(form.city, {'label': false, 'id': 'autocomplete', 'attr': {'placeholder': 'Ville ou code postal', 'class': ''}}) }}

                            {{ form_row(form.longitude, {'label': false}) }}

                            {{ form_row(form.latitude, {'label': false}) }}

                            <label>Sexe</label>
                            {{ form_row(form.sexe, {'label': false,'attr': {'placeholder': 'Sexe', 'class': ''}}) }}

                            <button class="btn btn-primary">Enregistrer</button>
                        </div>
                        {{ form_end(form) }}

                    </div>
                </div>

            </div>
        </div>
    </section>

{% endblock %}
{% block javascripts %}
    <script>
        let autocomplete;

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById("autocomplete"),
                {
                    types: ['(regions)'],
                    componentRestrictions: {country: "fr"}
                }
            );
            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(["geometry"]);
            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            autocomplete.addListener("place_changed", fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            const place = autocomplete.getPlace();

            if(typeof place !== 'undefined'){
                if (!place.geometry) {
                    window.alert("Veuillez sélectionner une autre adresse");
                    return;
                }else{
                    $('#user_longitude').val(place.geometry.location.lng());
                    $('#user_latitude').val(place.geometry.location.lat());
                }
            }
        }
    </script>
{% endblock %}
